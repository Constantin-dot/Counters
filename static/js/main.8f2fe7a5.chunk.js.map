{"version":3,"sources":["ComplexCounter/ComplexCounter.module.css","SimpleCounter/SimpleCounter.module.css","UniButton.tsx","ComplexCounter/ComplexCounter.tsx","SimpleCounter/SimpleCounter.tsx","ComplexCounter/counter-reducer.ts","App.tsx","serviceWorker.ts","store.ts","index.tsx"],"names":["module","exports","UniButton","props","Button","variant","onClick","disabled","dis","style","margin","value","ComplexCounter","className","classes","wrapper","isOpen","type","maxValue","onChange","e","setNewMaxValues","Number","currentTarget","startValue","setNewStartValues","changedValue","display","displayError","buttons","setIncrement","resetChangedValue","setDisplay","SimpleCounter","useState","count","setCount","initialState","complexCounterReducer","state","action","App","dispatch","useDispatch","complexCounter","useSelector","useCallback","SetDisplay","SetNewMaxValues","SetNewStartValues","SetIncrement","ResetChangedValue","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8f2fe7a5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ComplexCounter_wrapper__3CUMm\",\"display\":\"ComplexCounter_display__3uIsI\",\"displayError\":\"ComplexCounter_displayError__2gFM6\",\"buttons\":\"ComplexCounter_buttons__27Pig\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SimpleCounter_wrapper__13vFY\",\"display\":\"SimpleCounter_display__2Mzpg\",\"displayError\":\"SimpleCounter_displayError__2HWlh\",\"buttons\":\"SimpleCounter_buttons__Vf2me\",\"buttonBlock\":\"SimpleCounter_buttonBlock__2obyJ\"};","import React from \"react\";\r\nimport {Button} from \"@material-ui/core\";\r\n\r\n\r\ntype UniButtonPropsType = {\r\n    onClick: () => void\r\n    value: string\r\n    dis?: boolean\r\n}\r\n\r\nexport const UniButton = (props: UniButtonPropsType) => {\r\n\r\n    return (\r\n        <Button variant={\"outlined\"}\r\n                onClick={props.onClick}\r\n                disabled={props.dis}\r\n                style={{margin: '5px'}}\r\n        >\r\n            {props.value}\r\n        </Button>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {UniButton} from \"../UniButton\";\r\nimport classes from \"./ComplexCounter.module.css\";\r\n\r\ntype ComplexCounterPropsType = {\r\n    isOpen: boolean\r\n    maxValue: number\r\n    startValue: number\r\n    changedValue: number\r\n    setDisplay: (isOpen: boolean) => void\r\n    setNewMaxValues: (maxValue: number) => void\r\n    setNewStartValues: (startValue: number) => void\r\n    setIncrement: (changedValue: number) => void\r\n    resetChangedValue: (startValue: number, changedValue: number) => void\r\n}\r\n\r\nconst ComplexCounter = (props: ComplexCounterPropsType) => {\r\n\r\n    let improveCount = () => {\r\n        props.setIncrement(props.changedValue);\r\n    }\r\n\r\n    let resetCount = () => {\r\n        props.resetChangedValue(props.startValue, props.changedValue);\r\n    }\r\n\r\n    let reSet = () => {\r\n        props.setDisplay(!props.isOpen);\r\n    }\r\n\r\n    const onMaxValueChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setNewMaxValues(Number(e.currentTarget.value));\r\n    }\r\n\r\n    const onStartValueChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setNewStartValues(Number(e.currentTarget.value));\r\n    }\r\n\r\n    return <div className={classes.wrapper}>\r\n        {props.isOpen ?\r\n            <div>\r\n                max value: <input\r\n                type={\"number\"}\r\n                value={props.maxValue}\r\n                onChange={onMaxValueChange}\r\n            />\r\n                start value: <input\r\n                type={\"number\"}\r\n                value={props.startValue}\r\n                onChange={onStartValueChange}\r\n            />\r\n            </div> :\r\n            <div className={props.changedValue < props.maxValue ? classes.display : classes.displayError}>{\r\n                props.startValue < props.maxValue ? props.changedValue : 'Wrong SV!'\r\n            }</div>\r\n        }\r\n        <div className={classes.buttons}>\r\n            <UniButton onClick={improveCount} value={'inc'} dis={props.changedValue === props.maxValue || props.startValue >= props.maxValue} />\r\n            <UniButton onClick={resetCount} value={'reset'} dis={props.changedValue === props.startValue} />\r\n            <UniButton onClick={reSet} value={'set'} />\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ComplexCounter;","import React, {useState} from \"react\";\r\nimport {UniButton} from \"../UniButton\";\r\nimport classes from \"./SimpleCounter.module.css\";\r\n\r\nconst SimpleCounter = () => {\r\n    let [count, setCount] = useState(0);\r\n\r\n    let improveCount = () => {\r\n        setCount(count+1);\r\n    }\r\n\r\n    let resetCount = () => {\r\n        setCount(0);\r\n    }\r\n\r\n    return <div className={classes.wrapper}>\r\n        <div className={count < 5 ? classes.display : classes.displayError}>{count}</div>\r\n        <div className={classes.buttons}>\r\n            <UniButton onClick={improveCount} value={'inc'} dis={count === 5} />\r\n            <UniButton onClick={resetCount} value={'reset'} dis={count === 0} />\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default SimpleCounter;","\r\nexport const SET_DISPLAY = 'SET-DISPLAY';\r\nexport const SET_NEW_MAX_VALUES = 'SET-NEW-MAX-VALUES';\r\nexport const SET_NEW_START_VALUES = 'SET-NEW-START-VALUES';\r\nexport const SET_INCREMENT = 'SET-INCREMENT';\r\nexport const RESET_CHANGED_VALUE = 'RESET-CHANGED-VALUE';\r\n\r\nexport type ComplexCounterType = {\r\n    isOpen: boolean,\r\n    maxValue: number,\r\n    startValue: number,\r\n    changedValue: number,\r\n}\r\n\r\nconst initialState: ComplexCounterType = {\r\n    isOpen: false,\r\n    maxValue: 1,\r\n    startValue: 0,\r\n    changedValue: 0,\r\n};\r\n\r\nexport type SetDisplayActionType = {\r\n    type: typeof SET_DISPLAY\r\n    isOpen: boolean\r\n}\r\n\r\nexport type SetNewMaxValuesActionType = {\r\n    type: typeof SET_NEW_MAX_VALUES\r\n    maxValue: number\r\n}\r\n\r\nexport type SetNewStartValuesActionType = {\r\n    type: typeof SET_NEW_START_VALUES\r\n    startValue: number\r\n}\r\n\r\nexport type SetIncrementActionType = {\r\n    type: typeof  SET_INCREMENT\r\n    changedValue: number\r\n}\r\n\r\nexport type ResetChangedValueActionType = {\r\n    type: typeof  RESET_CHANGED_VALUE\r\n    startValue: number\r\n    changedValue: number\r\n}\r\n\r\ntype ActionType = SetNewMaxValuesActionType | SetDisplayActionType |\r\n    SetNewStartValuesActionType | SetIncrementActionType |\r\n    ResetChangedValueActionType;\r\n\r\nexport const complexCounterReducer = (state: ComplexCounterType = initialState, action: ActionType): ComplexCounterType => {\r\n    switch (action.type) {\r\n        case SET_DISPLAY:\r\n            return {\r\n                ...state,\r\n               isOpen: action.isOpen\r\n        }\r\n        case SET_NEW_MAX_VALUES:\r\n            return {\r\n                ...state,\r\n                maxValue: action.maxValue\r\n        }\r\n        case SET_NEW_START_VALUES:\r\n            return {\r\n                ...state,\r\n                startValue: action.startValue,\r\n                changedValue: action.startValue\r\n        }\r\n        case SET_INCREMENT:\r\n            return {\r\n                ...state,\r\n                changedValue: action.changedValue + 1\r\n        }\r\n        case RESET_CHANGED_VALUE:\r\n            return {\r\n                ...state,\r\n                changedValue: action.startValue\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const SetDisplay = (isOpen: boolean): SetDisplayActionType => {\r\n    return { type: SET_DISPLAY, isOpen}\r\n}\r\n\r\nexport const SetNewMaxValues = (maxValue: number): SetNewMaxValuesActionType => {\r\n    return { type: SET_NEW_MAX_VALUES, maxValue}\r\n}\r\n\r\nexport const SetNewStartValues = (startValue: number): SetNewStartValuesActionType => {\r\n    return { type: SET_NEW_START_VALUES, startValue}\r\n}\r\n\r\nexport const SetIncrement = (changedValue: number): SetIncrementActionType => {\r\n    return { type: SET_INCREMENT, changedValue}\r\n}\r\n\r\nexport const ResetChangedValue = (startValue: number, changedValue: number): ResetChangedValueActionType => {\r\n    return { type: RESET_CHANGED_VALUE, startValue, changedValue}\r\n}\r\n\r\nexport default complexCounterReducer;","import React, {useCallback} from 'react';\nimport './App.css';\nimport ComplexCounter from \"./ComplexCounter/ComplexCounter\";\nimport SimpleCounter from \"./SimpleCounter/SimpleCounter\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./store\";\nimport {\n    ComplexCounterType, ResetChangedValue,\n    SetDisplay,\n    SetIncrement,\n    SetNewMaxValues,\n    SetNewStartValues\n} from \"./ComplexCounter/counter-reducer\";\n\nfunction App() {\n    const dispatch = useDispatch();\n    const complexCounter = useSelector<AppRootStateType, ComplexCounterType>(\n        state => state.complexCounter\n    );\n\n    const setDisplay = useCallback((isOpen) => {\n        dispatch(SetDisplay(isOpen));\n    }, [dispatch]);\n\n    const setNewMaxValues = useCallback((maxValue) => {\n        dispatch(SetNewMaxValues(maxValue));\n    }, [dispatch]);\n\n    const setNewStartValues = useCallback((startValue) => {\n        dispatch(SetNewStartValues(startValue));\n    }, [dispatch]);\n\n    const setIncrement = useCallback((changedValue) => {\n        dispatch(SetIncrement(changedValue));\n    }, [dispatch]);\n\n    const resetChangedValue = useCallback((startValue, changedValue) => {\n        dispatch(ResetChangedValue(startValue, changedValue));\n    }, [dispatch]);\n\n    return (\n        <div className=\"App\">\n            <SimpleCounter />\n            <ComplexCounter\n                isOpen={complexCounter.isOpen}\n                maxValue={complexCounter.maxValue}\n                startValue={complexCounter.startValue}\n                changedValue={complexCounter.changedValue}\n                setDisplay={setDisplay}\n                setNewMaxValues={setNewMaxValues}\n                setNewStartValues={setNewStartValues}\n                setIncrement={setIncrement}\n                resetChangedValue={resetChangedValue}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from \"redux\";\r\nimport {complexCounterReducer} from \"./ComplexCounter/counter-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    complexCounter: complexCounterReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}